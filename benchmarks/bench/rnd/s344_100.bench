# circuit:s344
INPUT(START)
INPUT(B0)
INPUT(B1)
INPUT(B2)
INPUT(B3)
INPUT(A0)
INPUT(A1)
INPUT(A2)
INPUT(A3)
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)
INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
INPUT(keyinput64)
INPUT(keyinput65)
INPUT(keyinput66)
INPUT(keyinput67)
INPUT(keyinput68)
INPUT(keyinput69)
INPUT(keyinput70)
INPUT(keyinput71)
INPUT(keyinput72)
INPUT(keyinput73)
INPUT(keyinput74)
INPUT(keyinput75)
INPUT(keyinput76)
INPUT(keyinput77)
INPUT(keyinput78)
INPUT(keyinput79)
INPUT(keyinput80)
INPUT(keyinput81)
INPUT(keyinput82)
INPUT(keyinput83)
INPUT(keyinput84)
INPUT(keyinput85)
INPUT(keyinput86)
INPUT(keyinput87)
INPUT(keyinput88)
INPUT(keyinput89)
INPUT(keyinput90)
INPUT(keyinput91)
INPUT(keyinput92)
INPUT(keyinput93)
INPUT(keyinput94)
INPUT(keyinput95)
INPUT(keyinput96)
INPUT(keyinput97)
INPUT(keyinput98)
INPUT(keyinput99)
OUTPUT(P4)
OUTPUT(P5)
OUTPUT(P6)
OUTPUT(P7)
OUTPUT(P0)
OUTPUT(P1)
OUTPUT(P2)
OUTPUT(P3)
OUTPUT(CNTVCON2)
OUTPUT(CNTVCO2)
OUTPUT(READY)
CT2 = dff( xenc72 )
CT1 = dff( CNTVG2VD )
CT0 = dff( xenc8 )
ACVQN3 = dff( xenc51 )
ACVQN2 = dff( ACVG3VD1 )
ACVQN1 = dff( ACVG2VD1 )
ACVQN0 = dff( xenc58 )
MRVQN3 = dff( MRVG4VD )
MRVQN2 = dff( xenc82 )
MRVQN1 = dff( MRVG2VD )
MRVQN0 = dff( MRVG1VD )
AX3 = dff( xenc94 )
AX2 = dff( AM2 )
AX1 = dff( AM1 )
AX0 = dff( xenc12 )
CNTVG3VQN = not( CT2 )
CNTVG2VQN = not( xenc1 )
CNTVG1VQN = not( CT0 )
xenc41 = not( ACVQN3 )
P6 = not( ACVQN2 )
P5 = not( xenc44 )
P4 = not( xenc64 )
P3 = not( MRVQN3 )
xenc17 = not( xenc87 )
xenc79 = not( xenc90 )
P0 = not( xenc13 )
CNTVCON0 = not( CT0 )
CT1N = not( xenc1 )
ACVPCN = not( START )
CNTVCO0 = not( CNTVG1VQN )
AMVS0N = not( INIT )
xenc81 = not( READYN )
BMVS0N = not( READYN )
AMVG5VS0P = not( AMVS0N )
AMVG4VS0P = not( AMVS0N )
AMVG3VS0P = not( AMVS0N )
AMVG2VS0P = not( AMVS0N )
AD0 = not( xenc11 )
AD1 = not( AD1N )
AD2 = not( xenc10 )
AD3 = not( xenc20 )
CNTVG3VD1 = not( xenc6 )
CNTVG1VD1 = not( READY )
BMVG5VS0P = not( xenc67 )
BMVG4VS0P = not( xenc67 )
BMVG3VS0P = not( xenc67 )
BMVG2VS0P = not( xenc67 )
SMVS0N = not( xenc2 )
MRVSHLDN = not( xenc2 )
ADDVC1 = not( xenc52 )
SMVG5VS0P = not( xenc24 )
SMVG4VS0P = not( xenc24 )
SMVG3VS0P = not( xenc24 )
SMVG2VS0P = not( xenc24 )
CNTVG1VZ = not( xenc21 )
AM3 = not( xenc59 )
AM2 = not( AMVG4VX )
AM1 = not( xenc97 )
AM0 = not( AMVG2VX )
S0 = not( ADDVG1VP )
BM3 = not( xenc89 )
BM2 = not( BMVG4VX )
BM1 = not( BMVG3VX )
BM0 = not( BMVG2VX )
ADDVC2 = not( xenc99 )
S1 = not( ADDVG2VSN )
ADDVC3 = not( ADDVG3VCN )
S2 = not( ADDVG3VSN )
SM0 = not( xenc33 )
CO = not( ADDVG4VCN )
S3 = not( xenc23 )
SM1 = not( xenc4 )
SM3 = not( xenc95 )
SM2 = not( xenc22 )
AMVG5VG1VAD1NF = and( AMVS0N, AX3 )
AMVG4VG1VAD1NF = and( AMVS0N, xenc50 )
AMVG3VG1VAD1NF = and( AMVS0N, xenc29 )
AMVG2VG1VAD1NF = and( AMVS0N, xenc35 )
BMVG5VG1VAD1NF = and( xenc67, P3 )
BMVG4VG1VAD1NF = and( xenc67, P2 )
BMVG3VG1VAD1NF = and( xenc67, P1 )
BMVG2VG1VAD1NF = and( xenc67, P0 )
AMVG5VG1VAD2NF = and( xenc77, A3 )
AMVG4VG1VAD2NF = and( xenc86, A2 )
AMVG3VG1VAD2NF = and( AMVG3VS0P, A1 )
AMVG2VG1VAD2NF = and( AMVG2VS0P, A0 )
ADDVG2VCNVAD1NF = and( xenc62, P5 )
ADDVG3VCNVAD1NF = and( xenc3, P6 )
ADDVG4VCNVAD1NF = and( AD3, P7 )
MRVG3VDVAD1NF = and( xenc2, P3 )
MRVG2VDVAD1NF = and( xenc2, P2 )
MRVG1VDVAD1NF = and( xenc2, P1 )
BMVG5VG1VAD2NF = and( xenc30, B3 )
BMVG4VG1VAD2NF = and( xenc18, B2 )
BMVG3VG1VAD2NF = and( xenc73, B1 )
BMVG2VG1VAD2NF = and( xenc54, B0 )
SMVG5VG1VAD1NF = and( xenc24, P7 )
SMVG4VG1VAD1NF = and( xenc24, P6 )
SMVG3VG1VAD1NF = and( xenc24, P5 )
SMVG2VG1VAD1NF = and( xenc24, P4 )
ADDVG2VCNVAD4NF = and( ADDVC1, xenc62, P5 )
ADDVG2VCNVAD2NF = and( ADDVC1, ADDVG2VCNVOR1NF )
MRVG4VDVAD1NF = and( xenc2, xenc75 )
MRVG4VDVAD2NF = and( xenc7, xenc14 )
MRVG3VDVAD2NF = and( xenc7, xenc9 )
MRVG2VDVAD2NF = and( xenc7, BM1 )
MRVG1VDVAD2NF = and( xenc7, xenc83 )
ADDVG2VCNVAD3NF = and( ADDVG2VCNVOR2NF, xenc99 )
ADDVG3VCNVAD4NF = and( xenc68, xenc3, P6 )
ADDVG3VCNVAD2NF = and( xenc68, xenc40 )
ADDVG3VCNVAD3NF = and( ADDVG3VCNVOR2NF, ADDVG3VCN )
SMVG2VG1VAD2NF = and( xenc57, xenc27 )
ADDVG4VCNVAD4NF = and( xenc32, AD3, P7 )
ADDVG4VCNVAD2NF = and( xenc32, xenc28 )
ADDVG4VCNVAD3NF = and( ADDVG4VCNVOR2NF, ADDVG4VCN )
SMVG3VG1VAD2NF = and( SMVG3VS0P, xenc55 )
SMVG5VG1VAD2NF = and( SMVG5VS0P, xenc37 )
SMVG4VG1VAD2NF = and( xenc0, xenc47 )
ADDVG1VPVOR1NF = or( xenc63, P4 )
ADDVG2VCNVOR1NF = or( xenc62, P5 )
ADDVG3VCNVOR1NF = or( xenc3, P6 )
ADDVG4VCNVOR1NF = or( AD3, P7 )
CNTVG3VG2VOR1NF = or( CT2, xenc42 )
CNTVG2VG2VOR1NF = or( xenc1, xenc76 )
ADDVG2VCNVOR2NF = or( ADDVC1, xenc62, P5 )
ADDVG3VCNVOR2NF = or( xenc68, xenc3, P6 )
ADDVG4VCNVOR2NF = or( xenc32, AD3, P7 )
READYN = nand( CT0, xenc26, CT2 )
AD0N = nand( P0, xenc35 )
AD1N = nand( P0, xenc29 )
AD2N = nand( P0, xenc50 )
AD3N = nand( P0, AX3 )
CNTVCON1 = nand( xenc1, xenc46 )
xenc49 = nand( CT2, xenc61 )
ADDVG1VCN = nand( xenc63, P4 )
CNTVG3VZ1 = nand( CT2, xenc42 )
CNTVG2VZ1 = nand( xenc1, xenc76 )
CNTVG1VZ1 = nand( CT0, xenc78 )
ADDVG1VP = nand( ADDVG1VPVOR1NF, xenc52 )
CNTVG3VZ = nand( xenc66, CNTVG3VZ1 )
CNTVG2VZ = nand( CNTVG2VG2VOR1NF, CNTVG2VZ1 )
ACVG1VD1 = nand( xenc92, xenc70 )
ACVG2VD1 = nand( xenc92, SM1 )
ACVG4VD1 = nand( xenc92, xenc96 )
ACVG3VD1 = nand( xenc92, SM2 )
INIT = nor( CT0, xenc1, CT2 )
CNTVCO1 = nor( CNTVG2VQN, xenc69 )
CNTVCO2 = nor( xenc39, xenc6 )
ADSH = nor( READY, INIT )
CNTVG2VD1 = nor( READY, xenc69 )
AMVG5VX = nor( AMVG5VG1VAD2NF, xenc85 )
AMVG4VX = nor( AMVG4VG1VAD2NF, AMVG4VG1VAD1NF )
AMVG3VX = nor( xenc5, xenc19 )
AMVG2VX = nor( AMVG2VG1VAD2NF, AMVG2VG1VAD1NF )
BMVG5VX = nor( xenc53, xenc71 )
BMVG4VX = nor( xenc45, BMVG4VG1VAD1NF )
BMVG3VX = nor( BMVG3VG1VAD2NF, BMVG3VG1VAD1NF )
BMVG2VX = nor( BMVG2VG1VAD2NF, xenc60 )
CNTVG3VD = nor( xenc43, START )
CNTVG2VD = nor( CNTVG2VZ, START )
CNTVG1VD = nor( CNTVG1VZ, START )
ADDVG2VCN = nor( xenc91, ADDVG2VCNVAD1NF )
MRVG4VD = nor( xenc74, MRVG4VDVAD1NF )
MRVG3VD = nor( MRVG3VDVAD2NF, MRVG3VDVAD1NF )
MRVG2VD = nor( xenc36, MRVG2VDVAD1NF )
MRVG1VD = nor( MRVG1VDVAD2NF, MRVG1VDVAD1NF )
ADDVG2VSN = nor( xenc88, xenc38 )
ADDVG3VCN = nor( xenc98, xenc80 )
ADDVG3VSN = nor( xenc34, xenc65 )
SMVG2VX = nor( xenc16, SMVG2VG1VAD1NF )
ADDVG4VCN = nor( xenc56, xenc15 )
ADDVG4VSN = nor( xenc31, ADDVG4VCNVAD3NF )
SMVG3VX = nor( xenc25, xenc84 )
SMVG5VX = nor( xenc93, SMVG5VG1VAD1NF )
SMVG4VX = nor( xenc48, SMVG4VG1VAD1NF )
xenc0 = xor( SMVG4VS0P, keyinput0 )
xenc1 = xnor( CT1, keyinput1 )
xenc2 = xnor( ADSH, keyinput2 )
xenc3 = xor( AD2, keyinput3 )
xenc4 = xor( SMVG3VX, keyinput4 )
xenc5 = xnor( AMVG3VG1VAD2NF, keyinput5 )
xenc6 = xor( CNTVCON1, keyinput6 )
xenc7 = xor( MRVSHLDN, keyinput7 )
xenc8 = xor( CNTVG1VD, keyinput8 )
xenc9 = xnor( BM2, keyinput9 )
xenc10 = xor( AD2N, keyinput10 )
xenc11 = xor( AD0N, keyinput11 )
xenc12 = xor( AM0, keyinput12 )
xenc13 = xor( MRVQN0, keyinput13 )
xenc14 = xnor( BM3, keyinput14 )
xenc15 = xnor( ADDVG4VCNVAD1NF, keyinput15 )
xenc16 = xnor( SMVG2VG1VAD2NF, keyinput16 )
P2 = xor( xenc17, keyinput17 )
xenc18 = xor( BMVG4VS0P, keyinput18 )
xenc19 = xnor( AMVG3VG1VAD1NF, keyinput19 )
xenc20 = xnor( AD3N, keyinput20 )
xenc21 = xor( CNTVG1VZ1, keyinput21 )
xenc22 = xnor( SMVG4VX, keyinput22 )
xenc23 = xnor( ADDVG4VSN, keyinput23 )
xenc24 = xnor( SMVS0N, keyinput24 )
xenc25 = xor( SMVG3VG1VAD2NF, keyinput25 )
xenc26 = xnor( CT1N, keyinput26 )
xenc27 = xor( S1, keyinput27 )
xenc28 = xnor( ADDVG4VCNVOR1NF, keyinput28 )
xenc29 = xor( AX1, keyinput29 )
xenc30 = xnor( BMVG5VS0P, keyinput30 )
xenc31 = xor( ADDVG4VCNVAD4NF, keyinput31 )
xenc32 = xnor( ADDVC3, keyinput32 )
xenc33 = xnor( SMVG2VX, keyinput33 )
xenc34 = xnor( ADDVG3VCNVAD4NF, keyinput34 )
xenc35 = xor( AX0, keyinput35 )
xenc36 = xor( MRVG2VDVAD2NF, keyinput36 )
xenc37 = xor( CO, keyinput37 )
xenc38 = xnor( ADDVG2VCNVAD3NF, keyinput38 )
xenc39 = xnor( CNTVG3VQN, keyinput39 )
xenc40 = xor( ADDVG3VCNVOR1NF, keyinput40 )
P7 = xor( xenc41, keyinput41 )
xenc42 = xor( CNTVG3VD1, keyinput42 )
xenc43 = xor( CNTVG3VZ, keyinput43 )
xenc44 = xor( ACVQN1, keyinput44 )
xenc45 = xor( BMVG4VG1VAD2NF, keyinput45 )
xenc46 = xor( CNTVCO0, keyinput46 )
xenc47 = xor( S3, keyinput47 )
xenc48 = xnor( SMVG4VG1VAD2NF, keyinput48 )
CNTVCON2 = xnor( xenc49, keyinput49 )
xenc50 = xor( AX2, keyinput50 )
xenc51 = xor( ACVG4VD1, keyinput51 )
xenc52 = xnor( ADDVG1VCN, keyinput52 )
xenc53 = xor( BMVG5VG1VAD2NF, keyinput53 )
xenc54 = xor( BMVG2VS0P, keyinput54 )
xenc55 = xnor( S2, keyinput55 )
xenc56 = xnor( ADDVG4VCNVAD2NF, keyinput56 )
xenc57 = xor( SMVG2VS0P, keyinput57 )
xenc58 = xor( ACVG1VD1, keyinput58 )
xenc59 = xnor( AMVG5VX, keyinput59 )
xenc60 = xor( BMVG2VG1VAD1NF, keyinput60 )
xenc61 = xor( CNTVCO1, keyinput61 )
xenc62 = xnor( AD1, keyinput62 )
xenc63 = xor( AD0, keyinput63 )
xenc64 = xor( ACVQN0, keyinput64 )
xenc65 = xnor( ADDVG3VCNVAD3NF, keyinput65 )
xenc66 = xnor( CNTVG3VG2VOR1NF, keyinput66 )
xenc67 = xnor( BMVS0N, keyinput67 )
xenc68 = xnor( ADDVC2, keyinput68 )
xenc69 = xor( CNTVCON0, keyinput69 )
xenc70 = xnor( SM0, keyinput70 )
xenc71 = xor( BMVG5VG1VAD1NF, keyinput71 )
xenc72 = xnor( CNTVG3VD, keyinput72 )
xenc73 = xor( BMVG3VS0P, keyinput73 )
xenc74 = xnor( MRVG4VDVAD2NF, keyinput74 )
xenc75 = xor( S0, keyinput75 )
xenc76 = xor( CNTVG2VD1, keyinput76 )
xenc77 = xnor( AMVG5VS0P, keyinput77 )
xenc78 = xnor( CNTVG1VD1, keyinput78 )
P1 = xor( xenc79, keyinput79 )
xenc80 = xnor( ADDVG3VCNVAD1NF, keyinput80 )
READY = xor( xenc81, keyinput81 )
xenc82 = xnor( MRVG3VD, keyinput82 )
xenc83 = xnor( BM0, keyinput83 )
xenc84 = xor( SMVG3VG1VAD1NF, keyinput84 )
xenc85 = xnor( AMVG5VG1VAD1NF, keyinput85 )
xenc86 = xnor( AMVG4VS0P, keyinput86 )
xenc87 = xor( MRVQN2, keyinput87 )
xenc88 = xor( ADDVG2VCNVAD4NF, keyinput88 )
xenc89 = xor( BMVG5VX, keyinput89 )
xenc90 = xnor( MRVQN1, keyinput90 )
xenc91 = xnor( ADDVG2VCNVAD2NF, keyinput91 )
xenc92 = xnor( ACVPCN, keyinput92 )
xenc93 = xnor( SMVG5VG1VAD2NF, keyinput93 )
xenc94 = xor( AM3, keyinput94 )
xenc95 = xnor( SMVG5VX, keyinput95 )
xenc96 = xnor( SM3, keyinput96 )
xenc97 = xnor( AMVG3VX, keyinput97 )
xenc98 = xnor( ADDVG3VCNVAD2NF, keyinput98 )
xenc99 = xnor( ADDVG2VCN, keyinput99 )
